class Solution {
     public class par{
	        int first;
	        int []second;
	        public par(int first,int []second){
	            this.first=first;
	            this.second=second;
	        }
       
	    }
	  public class sorti implements Comparator<par>{
	       

			@Override
			public int compare(par p1, par p2) {
				
				 return p1.first-p2.first;
			}
	    }
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<par>p1=new PriorityQueue<>(new sorti());
        int[][]ans=new int[k][];
      int n=points.length;
        for(int i=0;i<n;i++){
         int []arr=points[i];
         int d= Math.abs((arr[0]*arr[0])+(arr[1]*arr[1]));
         p1.add(new par(d,points[i]));

        }
        int j=0;
        while(p1.size()>0&&j<k){
            ans[j++]=p1.poll().second;
        }
 return ans;
    }
}
